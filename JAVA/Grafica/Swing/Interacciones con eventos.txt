Empezamos a dar desencadenadores de eventos de manera de indicar cuando pulsamos sobre algo y las acciones que realizamos etc 


3 Factores principales :

Que desencadena la accion ->Objeto Evento

Quien desencada la accion->Objeto Fuente

Quien recibe la accion->Objeto Listener



Ejemplo al hacer click en uno de los desplegables de arriba
en word nos da el combo de opciones correspondientes

Generico inicial previo pregenerado



package test.eventos;




import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class testUno {
    
        public static void main(String[] args) {
        
        Marcos m1=new Marcos();
        
        m1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        m1.setVisible(true);
        
    }
    
}

class Marcos extends JFrame{

    public Marcos(){
    
        Toolkit pantalla=Toolkit.getDefaultToolkit();
        Dimension dim=pantalla.getScreenSize();
        
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));
        
        
        
       
        
        
        
        setTitle("Aplicacion con imagenes");
        
    
        Paneles p=new Paneles();
        
        p.setBackground(Color.PINK);
       
        
        add(p);
        
       
        
        
    }
    


}


class Paneles extends JPanel{

    //Creamos primero el boton correspondiente 
    
    //Sintaxis
    //JButton nombreBoton=new JButton("nombre Visialuzacion");
    
    JButton btnAzul=new JButton("Azul");
    
    //Hacemos creacion del constructor 
    
    public Paneles(){
        
        add(btnAzul);
    
    }

    
}







--------------------------

Sintaxis introduccion

Vamos a tener que manejar el objeto evento
Estos vienen de java.awt.event
EventObject->Padre de
ActionEvent
WindowEvent 

Ejemplo

Objeto fuente ->JButton ->addActionListener(objeto listener)
Objeto Listener->JPanel ->implementa ActionListener->usa el metodo actionPerformed(Objeto Evento)


empezamos en la lamina creamos el botton que querramos 

Sintaxis

JButton nombreB=new JButton(nombreVisual);

agregarlo en el constructor al principal

public clase(){
	
	add(nombreB);

}


Pero falta ponerlo a la escucha por lo cual primero implementamos el 
ActionListener a la clase y generamos el actionPerformed

en el actionPerformed le pasamos la accion que querremos que haga 

y agregamos en el boton que tenga un actionListener con elementon como escucha de this

nombreB.addActionListener(this);

el actionPerformed recibe un ActionEvent e 

public void actionPerformed(ActionEvent e){
accion
	
}


En este caso lo ultimo quedaria 

class Paneles extends JPanel implements ActionListener{

    //Creamos primero el boton correspondiente 
    
    //Sintaxis
    //JButton nombreBoton=new JButton("nombre Visialuzacion");
    
    JButton btnAzul=new JButton("Azul");
    
    //Hacemos creacion del constructor 
    
    public Paneles(){
        
        add(btnAzul);
        
        btnAzul.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        this.setBackground(Color.BLUE);
    }

    
}

--------------------

Vemos que a esto mismo podemos agregarle mas funcionalidades dependiendo cual sea el boton que estemos tocando

tenemos que agregar el getSource para agregar mas fuentes de evento	


nosotros debemos de agregarle un receptor que diferencie 

entonces tomamos el nombre que le dieramos al action que recibe

el actionPerformed 

Object nombreObjeto=e.getSource();


Entonces leugo para cada caso hacemos la comparacion

if(nombreObjeto==btnElegido){

	Accion

}


En este caso el trabajo quedaria como 


package test.eventos;




import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class testUno {
    
        public static void main(String[] args) {
        
        Marcos m1=new Marcos();
        
        m1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        m1.setVisible(true);
        
        double pickle=2;
        int jar=(int) pickle;
        
        
    }
    
}

class Marcos extends JFrame{

    public Marcos(){
    
        Toolkit pantalla=Toolkit.getDefaultToolkit();
        Dimension dim=pantalla.getScreenSize();
        
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));
        
        
        
       
        
        
        
        setTitle("Aplicacion con imagenes");
        
    
        Paneles p=new Paneles();
        
        p.setBackground(Color.PINK);
       
        
        add(p);
        
       
        
        
    }
    


}


class Paneles extends JPanel implements ActionListener{

    //Creamos primero el boton correspondiente 
    
    //Sintaxis
    //JButton nombreBoton=new JButton("nombre Visialuzacion");
    
    JButton btnAzul=new JButton("Azul");
    JButton btnRojo=new JButton("Rojo");
    JButton btnAmarillo=new JButton("Amarillo");
    
    //Hacemos creacion del constructor 
    
    public Paneles(){
        
        add(btnAzul);
        add(btnRojo);
        add(btnAmarillo);
        
        btnAzul.addActionListener(this);

        btnRojo.addActionListener(this);
        btnAmarillo.addActionListener(this);    }

    @Override
    public void actionPerformed(ActionEvent e) {
        
        //objetc nombreReceptor=e.getSource();
        //Nos da el boton que esta interaccionando en este momento
        Object btnPulsado=e.getSource();
        
        if (btnPulsado==btnAzul) {
            this.setBackground(Color.BLUE);
            
        }else if(btnPulsado==btnRojo) {
        
            this.setBackground(Color.RED);
        }
        else {
            this.setBackground(Color.YELLOW);
        }
        
        
    }
    
   

    
}


---------------------------------------

Ahora veremos como poner la lamina de manera correcta con mejores practicas a la escucha 

Agregamos un colorFondo que sea una clase que solo sea el oyente 

Lo que hacemos entonces es hacer una clase interna para cada color que teng actionListener

private class Escucha implements ActionListener{
	
	private campo;
	
	Constructor{	

	}
	
	public void ActionPerformed(ActionEvent e){

	Accion Ejecutar
	}
}





Para el  ejemplo anterior debemos pasarle a cada uno 
lo que le corresponde a su accion generando un actionListeer nuevo


package test.eventos;




import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class testDos {
    
        public static void main(String[] args) {
        
        Marco m1=new Marco();
        
        m1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        m1.setVisible(true);
        
        double pickle=2;
        int jar=(int) pickle;
        
        
    }
    
}

class Marco extends JFrame{

    public Marco(){
    
        Toolkit pantalla=Toolkit.getDefaultToolkit();
        Dimension dim=pantalla.getScreenSize();
        
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));
        
        
        
       
        
        
        
        setTitle("Aplicacion con imagenes");
        
    
        Panel p=new Panel();
        
        p.setBackground(Color.PINK);
       
        
        add(p);
        
       
        
        
    }
    


}


class Panel extends JPanel{

    //Creamos primero el boton correspondiente 
    
    //Sintaxis
    //JButton nombreBoton=new JButton("nombre Visialuzacion");
    
    JButton btnAzul=new JButton("Azul");
    JButton btnRojo=new JButton("Rojo");
    JButton btnAmarillo=new JButton("Amarillo");
    
    //Hacemos creacion del constructor 
    
    public Panel(){
        
        add(btnAzul);
        add(btnRojo);
        add(btnAmarillo);
        
        ColorFondo Am=new ColorFondo(Color.YELLOW);
        ColorFondo Az=new ColorFondo(Color.BLUE);
        ColorFondo Ro=new ColorFondo(Color.RED);        
        btnAzul.addActionListener(Az);
        btnRojo.addActionListener(Ro);
        btnAmarillo.addActionListener(Am);    }


    
   
    private class ColorFondo implements ActionListener{

    private Color colorDeFondo;
    public ColorFondo(Color c){
    
        colorDeFondo=c;
    
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        
        setBackground(colorDeFondo);
        
    }


    }
    
}




-----------------------------

Vemos ahora para captar no solo los eventos del raton 
sino empezar a captar los eventos de ventana

WindowListener Vemos que deben implementar 7 metodos


windowActivated(WindowEvent e)
windowClosed(WindowEvent e)
windowClosing(WindowEvent e)
windowDesactived(WindowEvent e)
windowDeiconified(WindowEvent e)
windowIconified(WindowEvent e)
windowOpened(WindowEvent e)


Para trabjar ahora vamos a crear un marco simple que implemene el WindowsListener 	

Vamos a trabjar en el primero con un mensaje en consola cada que minimizamos la venatana 


Pongo ejemplo general y vemos que podemos tomar acciones para cada caso que querramos 
dependiendo que hacemos cuando usamos un programa

Vemos casos de creacion de dos ventanas


package test.eventosdeventana;




import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


public class testUno {
    
        public static void main(String[] args) {
        
        Marco m1=new Marco();
        
        Marco m2=new Marco();
        
        m2.setVisible(true);
        
        //Esta instruccion nos indica que cuando se cierra una se cierran ambas y no es la idea 
        m2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        m2.setTitle("Aplicacion Dos");
        m2.setLocation(200, 500);
        m1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        m1.setVisible(true);
        
        double pickle=2;
        int jar=(int) pickle;
        
        
    }
    
}

class Marco extends JFrame{

    public Marco(){
    
        Toolkit pantalla=Toolkit.getDefaultToolkit();
        Dimension dim=pantalla.getScreenSize();
        
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));
        
        
        setTitle("Aplicacion con eventos");
        
    
        Panel p=new Panel();
        
        p.setBackground(Color.PINK);
       
        M_Ventana marcoVentana=new M_Ventana();
        
        addWindowListener(marcoVentana);
        
        add(p);
        
       
        
        
    }
    


}


class Panel extends JPanel{

    
}

class M_Ventana implements WindowListener{

    @Override
    public void windowOpened(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void windowClosing(WindowEvent e) {
        
        JOptionPane.showMessageDialog(null, "Se Cerro");
    }

    @Override
    public void windowClosed(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    //Minimizar la ventana 
    @Override
    public void windowIconified(WindowEvent e) {
        JOptionPane.showMessageDialog(null, "Se minimizo");
    }

    //Maximizar la ventana
    @Override
    public void windowDeiconified(WindowEvent e) {
        JOptionPane.showMessageDialog(null, "Se maximizo");
    }

    @Override
    public void windowActivated(WindowEvent e) {
        
       // JOptionPane.showMessageDialog(null, "Se activo");
        System.out.println("Activa ventana");
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    

}






----------------------------

Clases adaptadoras

Las principales son

KeyAdapter 

WindowAdapter 

MouseAdapter

Vemos en este caso las interfaces que emplea el Window Adapter

WindowsFocusListener 
WindowsStateListener
WindowListener
EventListener

En este caso vamos a rediseñar para que el codigo quede mas limpio
empleado la extension de la clase 
WindowsAdapter

dejando solo el metodo que queremos que es el de minimizar

Simplificado queda 


package test.eventosdeventana;




import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


public class testDos {
    
        public static void main(String[] args) {
        
        Marcos m1=new Marcos();
        
        Marcos m2=new Marcos();
        
        m2.setVisible(true);
        
        //Esta instruccion nos indica que cuando se cierra una se cierran ambas y no es la idea 
        m2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        m2.setTitle("Aplicacion Dos");
        m2.setLocation(200, 500);
        m1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        m1.setVisible(true);
        
        double pickle=2;
        int jar=(int) pickle;
        
        
    }
    
}

class Marcos extends JFrame{

    public Marcos(){
    
        Toolkit pantalla=Toolkit.getDefaultToolkit();
        Dimension dim=pantalla.getScreenSize();
        
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));
        
        
        setTitle("Aplicacion con eventos");
        
    
        Paneles p=new Paneles();
        
        p.setBackground(Color.PINK);
       
        M_Ventanas marcoVentana=new M_Ventanas();
        
        addWindowListener(marcoVentana);
        
        add(p);
        
       
        
        
    }
    


}


class Paneles extends JPanel{

    
}

class M_Ventanas extends WindowAdapter{

 

    //Minimizar la ventana 
    @Override
    public void windowIconified(WindowEvent e) {
        JOptionPane.showMessageDialog(null, "Se minimizo");
    }

    //Maximizar la ventana
    @Override
    public void windowDeiconified(WindowEvent e) {
        JOptionPane.showMessageDialog(null, "Se maximizo");
    }

  
        

}







----------------------------


Accion cuando una ventana con mas de un evento al paralelo

Vamos a mostrar ahora con WindowStateListener

que capte cualquier cambio en la ventana 

WindowEvent tiene 
getNewState()->estado nuevo
getOldState()->estado viejo

WindowStateListener 

windowStateChanged(WindowEventE)

-------------------------------------------------

KeyEvent es la que viene 
con KeyAdapter
con esta forma vamos a poder ver las interacciones que tenemos con el teclado

KeyListener
-keyPressed ->presionada
-keyReleased -> cuando se suelta
-keyTyped ->cuando ya se escribio

Java considera como un evento a las interacciones que tenemos es decir que si uno interacciona con
una tecla y queremos almacenar esto 
tenemos que empaquetar este suceso en un objeto oyente

podemos ver por ejemplo con geyKeyChar que tecla fue la pulsada 

Primero creamos el marco basico y al mismo le agregamos los metodos implementados 

class oyente implements KeyListener{

}

Quedaria asi

package test.eventospartedos;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class testUno {
    public static void main(String[] args) {
        
                Marco m=new Marco();
                m.setVisible(true);
                m.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
               
                
    }
}

class Marco extends JFrame{
    
    Toolkit pantalla = Toolkit.getDefaultToolkit();
    
    Dimension dim=pantalla.getScreenSize();
    
    public Marco(){

            
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));

        Panel p=new Panel();
        p.setBackground(Color.PINK);
        
        add(p);
        
        //Creamos el evento y lo agregamos 
        EventoTeclado evento=new EventoTeclado();
        
        
        addKeyListener(evento);
        
        
}
    

    

}

class Panel extends JPanel{

    
    
    

}

class EventoTeclado implements KeyListener{

    @Override
    public void keyTyped(KeyEvent e) {
        //Si queremos ver en especifico la letra que escribio
        char caracter=e.getKeyChar();
        System.out.println(caracter);
    }

    @Override
    public void keyPressed(KeyEvent e) {
        //Sintaxis int nombreAScci=evento.getKeyCode();
        
        int codigo=e.getKeyCode();
        System.out.println("");
    }

    @Override
    public void keyReleased(KeyEvent e) {
        System.out.println("");
    }
}

------------------------------------------

Eventos con el mouse 

Vamos a trabajar con el 
MouseEvent

getX()
geyY()
getModifiers()
getClick()

Asi tambien vemos que tenemos la clase adaptadora MouseAdapter

Podemo trabajarlo de dos formas, generando todas los metodos
si implementamos la interfaz o extendiendo de la clase adpatadora 
y usando solo los metodos que querramos 
en este caso dejo planteado la llamada a la clase adaptadora que uso
y la implementacion de la interfaz para tener a mano los metodos

Hasta el momento tendriamos 

package test.eventospartedos;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class testMouse {
    public static void main(String[] args) {
        
                Marcos m=new Marcos();
                m.setVisible(true);
                m.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
               
                
    }
}

class Marcos extends JFrame{
    
    Toolkit pantalla = Toolkit.getDefaultToolkit();
    
    Dimension dim=pantalla.getScreenSize();
    
    public Marcos(){

            
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));

        Panel p=new Panel();
        p.setBackground(Color.PINK);
        
        add(p);
        
        //Creamos el evento y lo agregamos 
        EventoRaton evento=new EventoRaton();
        
        
        addMouseListener(evento);
        
        
}
    

    

}


class Aux implements MouseListener{

    @Override
    public void mouseClicked(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mousePressed(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseExited(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}


class EventoRaton extends MouseAdapter{

    @Override
    public void mouseClicked(MouseEvent e) {
        
        System.out.println("Haz  hecho un click");
        
    }
   
      @Override
    public void mouseEntered(MouseEvent e) {
          System.out.println("Paso el mouse por aca");
    }
    
}


 ------------------

package test.eventospartedos;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class testMouse {
    public static void main(String[] args) {
        
                Marcos m=new Marcos();
                m.setVisible(true);
                m.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
               
                
    }
}

class Marcos extends JFrame{
    
    Toolkit pantalla = Toolkit.getDefaultToolkit();
    
    Dimension dim=pantalla.getScreenSize();
    
    public Marcos(){

            
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));

        Panel p=new Panel();
        p.setBackground(Color.PINK);
        
        add(p);
        
        //Creamos el evento y lo agregamos 
        EventoRaton evento=new EventoRaton();
        
        
        addMouseListener(evento);
        
        
}
    

    

}


class Aux implements MouseListener{

    @Override
    public void mouseClicked(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mousePressed(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseExited(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}


class EventoRaton extends MouseAdapter{

  //  @Override
 //   public void mouseClicked(MouseEvent e) {
        
//        System.out.println("Haz  hecho un click");
        
        //Podemos encontrar el lugar en donde hicimos el click
//        System.out.println("x:"+e.getX());
//        System.out.println("y:"+e.getY());
        
        //Podemos contar tambien los click
        
//        System.out.println("Click"+e.getClickCount());

      //  System.out.println(e.getModifiersEx());
   // }
   
//      @Override
//    public void mouseEntered(MouseEvent e) {
//          System.out.println("Paso el mouse por aca");
//    }
    
        @Override
    public void mousePressed(MouseEvent e) {
        
           // System.out.println(e.getModifiersEx());
            
            //Vemos 1024 click izquierdo
            //4096 click derecho
            //2048 rueda
           
            if (e.getModifiersEx()==1024) {
                
                System.out.println("Click izquierdo");
            } else if(e.getModifiersEx()==4096) {
                System.out.println("Click derecho");
            }else{
                System.out.println("rueda");
            }
         
            
    }

    
}



------------------------

Eventos de focos


Vemos por ejemplo si tenemos dos ventanas abiertas entonce  precisamos que hay dos focos

si seleccionamos sobre un u otro archivo entonces vemos que
estamos cambiando el foco en lo que seleccionamos 

Para eso trabajamos con el

Focus Listener

focusGained y focusLost ambas reciben un evento de foco

pero suele ser mas comodo usar la clase adaptadora
FocusAdapter

SI lo hacemos en el caso de ventanas cambiamos por windows

windowsFocusListener

Siempre buscamos en toodos los casos usar las clases adaptadoras 
el motivo de esto es que nos ahorramos el hecho de implementar todos los metodos

Ejemplo

package test.eventosdefoci;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class testFocoUno {
    public static void main(String[] args) {
        
                Marcos m=new Marcos();
                m.setVisible(true);
                m.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
               
                
    }
}

class Marcos extends JFrame{
    
    Toolkit pantalla = Toolkit.getDefaultToolkit();
    
    Dimension dim=pantalla.getScreenSize();
    
    public Marcos(){

            
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));

        Panel p=new Panel();
        p.setBackground(Color.PINK);
        
        add(p);
        
       
        
        
}
    

    
    
    
    

}

class Panel extends JPanel{
    //Declaro como campos los jTextField a los que leugo quiza acceda
    
    private JTextField cuadroUno;
    private JTextField cuadroDos;


    public void paintComponent(Graphics g){
        
        
        
        super.paintComponent(g);
        //Tenemos que invalidar primero el Layout para que no lo ponga por defecto como 
        //hace el posicionamiento java 
        
        setLayout(null);
        
        //Seguiriamos creando dos areas de texto
        
        cuadroUno=new JTextField();
        cuadroDos=new JTextField();
        
        
        //Luego debemos enviarle las ubicaciones 
        
        //(x,y,ancho,alto)
        cuadroUno.setBounds(50,50,150,30);
        cuadroDos.setBounds(50,100,150,30);
        
        LanzaFoco foco=new LanzaFoco();
        
        cuadroUno.addFocusListener(foco);
        
        
        add(cuadroUno);
        
        add(cuadroDos);
    
    }

    
    class LanzaFoco extends FocusAdapter{
    
    @Override
    public void focusGained(FocusEvent e) {
        System.out.println("Gano el foco");
    }
    


}


----------------------

Carga mas completa 



