Paque AWT 
delega la creacion a la interfaz
SO(sistema operativo) huesped

Java 1.2 
Los elementos de una interfaz 
se pintan sobre una ventana 
	
CONCEPTO DE 

WRITE ONCE RUN ANYWAY

	

SWING 

los elementos de una interfaz se pintan sobre 
unan ventana 

Tenemos la clase Frame que viene del java awt

y la JFrame que viene del java swing 


lo que tenemos en javax es lo que extiende 

Caracteristicas de la ventana 

-Nacen con un tamaño inutil,precisan que enviemos un
setSize

en el constructor

setSize(ancho,alto)


-Nace invisible le debemos enviar un setVisible

nombreMarco.setVisible(true);


-Debemos indicar que se hace si se cierra el Frame 

nombreMarco.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

esto noda que se va  a cerrar una vez que cerremos la ventana 

Cuando iniciamos el programa por defecto nos aparece en el Sector por defecto en la
parte superior izquierda arriba 



Tenemos muchos metodos del JFrame

-Component
*setLocation (x,y)
*setBound   (x,y,ancho,largo)

-Container

-Window
*setIconImage(Image image)


-Frame
*setTitle(String title)



El marco se puede redireccionar si tiene un false entonces no permite que el marco 
set redirefcione

setResizable no te deja agrandar el tamaño de nuestrio JFrame


Para poner pantalla completa algo 

setExtendedState(JFrame);Maximed Both en mi caso para agregar mas contenido nos
es util

Tambien tenemos maximized vert y hort para maximazar el programa para las verticales
o las horizontales ;

---------------------------

Toolkit

La clase 
Toolkit es un lugar almacen de muchismos metodos que se relacionan con el entorno

Cuando queremos podemos pedir que sea el 
tamaño de la pantalla con el 

Toolkit m1=Toolkit.getDefaultToolkit();

Buscamos ahora que nos busque el tamaño de la pantalla

vamos a hacern un objeto del tipo dimension y ahi enviar ese elemento

Dimension pantalla=nombreToolkit.getScreenSize();

Luego para traer el alto y ancho

int alto=pantalla.height();
int ancho=pantalla.width();

y se lo enviamos al size y al location 


Tambien para seguir usando el toolkit debemos enviar 
un setIcon
pero devemos tener un getImagen 

Sintaxis

Image nombreImagen=nombreToolkit.getImage(Ruta relativa);

-----------------------------

ESCRITURA

En el caso de que escribamos vemos que no 
debemos escribir sobre el mismo sino 
sobre el panel/lamina 

el mismo consiste en un JPanel
La misma tiene muchos metodos que hereda de sus clases padres

el principal para generar un panel es el 
paintComponent(Graphics g)

El paratemtro del tipo Graphics que recibe es el que 
nos proporciona todo para hacer figuras y el prinicipal
drawString para escribir sobre la lamina 

Hacemos los pasos simil a como veniamos trabajando siempre y creamos
un panel o lamina que herede de JPanel

La fomra de construir ella es la siguiente

class nombrePanel extends Jpanel{

//Llamamos al paint component que reciba el objeto con las graficas

	public void paintComponent(Graphics g){

		super.paintComponent(Graphics g);
		//Usamos el metodo que escribe sobre el panel
		//Recordar que el metodo consta de 
		//g.drawString(Contenido,x,y)
		g.drawString("Texto",anchoP,altoP)
	
		}



}

 
Ahora simplemente instanciamos la lamina y la agregamos

asi quye dentro del marco escribimos 

nombreClase nombreLamina=new nombreClase();

add(nombreLamina)

-*******

Continuando con lo anteriror podemos tambien dibujar lineas o figuras



Con el drawRect 

el mimso se agrega a la lamina de la forma 
//Caso rectangulo o cuadrado
g.drawRect(x,y,width,height)

de cualquier forma esto queda desactualizado

Por lo mimso usamos la biblioteca 2D de java

Rectangle2D Elipse2D Line2D

todas pertencen a Graphics2D que tiene su respectivo draw

como necesitamos un objeto del tipo Graphics2D deberiamos ver la forma de generalo

vemos que cada clase para dibujar tiene su propia clase interna 

(como el elipse.float o elipse.double )



Quedaria 

Graphics2D g2=(Graphics2D) g;
//Esto anterior siempre y cuando hayamos instanciado el Graphics como g

luego creamos el rectangulo

Rectagle2D r1=new Rectangle2D(x,y,ancho,alto);

y luego lo dibujamos con el g2

g2.draw(r1);

Ver que el mismo como el elipse y las lineas todas usan la interface Shape
eso es lo necesario para que el Graphics2D pueda dibujarlo

Con las elipse no podemos indicar exacto donde va a empezar
muchas veces podemos guiarnos por un rectangulo con las mismas proporcioens para los bordes

se le agrega nomas el setFrame

vemos que quedaria 

Generar el rectagulo y luego enviar el mismo como base para la visualizacion de la elipse

Ellipse2D  elipse=new Ellipse2D.Double();
Rectangle2D auxR=new Rectangle2D.Double(x,y,ancho,alto);

elipse.setFrame(auxR);

g2.draw(elipse);

Para el caso de la linea es el mas Directo

g2.draw(new Line2D.Double(x,y,ancho,alto));



Vemos una pequeña practica dejando un cuadrado con un triangulo y un circulo que los engloba 

-----------------------------------------------------------------------

Manejar errores y manejar  el tema de colores


Los colores lo vemos del metodo setPaint que viene de los Graphics2D

Vemos que podemos tener el tema del constructor del color por el rgb 
(red green blue)

y nos guiamos por el metodo setPaint que nos pide un parametro del tipo paint 
metodo fill nos deja pintar el interior o relleno de la figura

en la clase color tenemos una constante con el nombre en minuscula y mayusculas
para la mayoria de los casos , por la nomenclatura correcta como las constantes se 
escriben en mayuscula nos deberiamos guiar por las mayusculas 


Para el caso del ejemplo vamos a construir un rectangulo con una elipse adentro y a partir de eso empezmaos a modificar


package test;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class testUno {
    public static void main(String[] args) {
        
        Marco m1=new Marco();
        
        m1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        m1.setVisible(true);
        
    }
    
}

class Marco extends JFrame{

    public Marco(){
    
        Toolkit pantalla=Toolkit.getDefaultToolkit();
        Dimension dim=pantalla.getScreenSize();
        
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));
        
        
        
       
        
        Image icono=pantalla.getImage("icono.jpg");
        
        setIconImage(icono);
        
        setTitle("Aplicacion con interaccion de color");
        
    
        Panel p=new Panel();
        
        add(p);
        
        
    }
    


}


class Panel extends JPanel{

    
    public void paintComponent(Graphics g){
    
    
        super.paintComponent(g);
        Graphics2D g2=(Graphics2D) g ;
        
        Rectangle2D r=new Rectangle2D.Double(50,50,150,100);
        
        Ellipse2D e1=new Ellipse2D.Double();
        
        e1.setFrame(r);
        
        g2.draw(r);
        g2.draw(e1);
        
    }



}



Ahora vemos que le agregamos para darle todo el color 

Vemos que con el setPaint enviamos el color que querramos en este caso si quisiera enviar un rojo haria

g2.setPaint(Color.RED);

Ahora si quisiera enviar un color para rellenar podria seleccionar que rellenar y enviar 

Estar bien atento a en que instancia ponemos cada uno

entonces basta en 

g2.setPaint(Color.ColoAgregar);

g2.fill(ObjetoARellenar);

vemos que por defecto va a tomar el color anterior que hayamos indicando 


si queremos un color mas elaborado en vez de escribir el color asi podemos generarlo

seria pasarle los 3 colores

g2.setPaint(new Color(rojos,green,blue));

Podemos crear un color extra y utilizarlo tambien

Color miColor= new Color(r,g,b);

siendo r g  b enteros

Si quremos cambiarle el backgfound a la pagina vamoas a nuestro frame y enviamos 

nombrePanel.setBackground(Color.NombreColor);


Completo 



package test;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class testUno {
    public static void main(String[] args) {
        
        Marco m1=new Marco();
        
        m1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        m1.setVisible(true);
        
    }
    
}

class Marco extends JFrame{

    public Marco(){
    
        Toolkit pantalla=Toolkit.getDefaultToolkit();
        Dimension dim=pantalla.getScreenSize();
        
        setBounds((dim.width/4),(dim.height/4),(dim.width/2),(dim.height/2));
        
        
        
       
        
        Image icono=pantalla.getImage("icono.jpg");
        
        setIconImage(icono);
        
        setTitle("Aplicacion con interaccion de color");
        
    
        Panel p=new Panel();
        
         p.setBackground(Color.PINK);
        
        add(p);
        
       
        
        
    }
    


}


class Panel extends JPanel{

    
    public void paintComponent(Graphics g){
    
    
        super.paintComponent(g);
        Graphics2D g2=(Graphics2D) g ;
        
        Rectangle2D r=new Rectangle2D.Double(50,50,150,100);
                
        g2.setPaint(Color.RED);
        
        g2.fill(r);
        g2.setPaint(Color.BLACK);
        
        Ellipse2D e1=new Ellipse2D.Double();
        
        g2.setPaint(Color.BLUE);
        
        
        e1.setFrame(r);
        g2.fill(e1);
        g2.setPaint(Color.BLACK);

        g2.draw(r);
        g2.draw(e1);
        
    }



}
